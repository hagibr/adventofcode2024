My input program is 2,4,1,1,7,5,4,7,1,4,0,3,5,5,3,0
Let's decompile it (8 instructions):
1th: 2,4 -> bst A [B = A % 8]
2nd: 1,1 -> bxl 1 [B = B ^ 1]
3rd: 7,5 -> cdv 5 [C = A // 32]
4th: 4,7 -> bxc   [B = B ^ C]
5th: 1,4 -> bxl 4 [B = B ^ 4]
6th: 0,3 -> adv 3 [A = A // 8]
7th: 5,5 -> out B [outputs current value at B modulo 8]
8th: 3,0 -> jnz 0 [if A not 0, jump to 1st instruction]

So, what can we do here? Some insights:
1) The 6th instruction divides A by 8, and the 7th outputs the current value of B % 8,
   and we test at the 8th instruction if A is equals to zero,
   so if we know that after 16 loops the program ends, then we know that A must be at least (8)^15,
   or 2^45, or 35184372088832
2) The 7th instruction outputs the current value of B % 8
3) If we want that it's value is equal to the first opcode (2),
   then we know that B must be equal to 8n + 2, where n is an unknown value
4) The 5th instruction is telling us that the outputted B value is XORed with the literal 4,
   so at this instruction, B = 8n + 6
5) The 4th instruction is telling that reg B is being XORed with current value of C,
   and the 3rd instruction is telling that reg C is the reg A shifted by 5 bits
6) The 2nd instruction is inverting the lsb of reg B
7) The 1st instruction is saying that at the beginning of the cycle,
   we get the 3 lsb of reg A and store them at reg B

Now we can relate the insights 1 and 7 (instructions 6th and 1st). This means that we can
find a rule of creation of the initial value of A, by following the processing of B value:

B = A % 8
B = B ^ 1
C = A // 32
B = B ^ C
B = B ^ 4